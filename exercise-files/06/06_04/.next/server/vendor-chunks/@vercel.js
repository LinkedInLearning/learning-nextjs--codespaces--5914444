"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vercel";
exports.ids = ["vendor-chunks/@vercel"];
exports.modules = {

/***/ "(rsc)/./node_modules/@vercel/postgres/dist/chunk-WDBQYBZQ.js":
/*!**************************************************************!*\
  !*** ./node_modules/@vercel/postgres/dist/chunk-WDBQYBZQ.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VercelClient: () => (/* binding */ VercelClient),\n/* harmony export */   VercelPool: () => (/* binding */ VercelPool),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createPool: () => (/* binding */ createPool),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   postgresConnectionString: () => (/* binding */ postgresConnectionString),\n/* harmony export */   sql: () => (/* binding */ sql),\n/* harmony export */   types: () => (/* reexport safe */ _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.types)\n/* harmony export */ });\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @neondatabase/serverless */ \"(rsc)/./node_modules/@neondatabase/serverless/index.mjs\");\n// src/create-pool.ts\n\n\n// src/error.ts\nvar VercelPostgresError = class extends Error {\n  constructor(code, message) {\n    super(`VercelPostgresError - '${code}': ${message}`);\n    this.code = code;\n    this.name = \"VercelPostgresError\";\n  }\n};\n\n// src/postgres-connection-string.ts\nfunction postgresConnectionString(type = \"pool\") {\n  let connectionString;\n  switch (type) {\n    case \"pool\": {\n      connectionString = process.env.POSTGRES_URL;\n      break;\n    }\n    case \"direct\": {\n      connectionString = process.env.POSTGRES_URL_NON_POOLING;\n      break;\n    }\n    default: {\n      const _exhaustiveCheck = type;\n      const str = _exhaustiveCheck;\n      throw new VercelPostgresError(\n        \"invalid_connection_type\",\n        `Unhandled type: ${str}`\n      );\n    }\n  }\n  if (connectionString === \"undefined\")\n    connectionString = void 0;\n  return connectionString;\n}\nfunction isPooledConnectionString(connectionString) {\n  return connectionString.includes(\"-pooler.\");\n}\nfunction isDirectConnectionString(connectionString) {\n  return !isPooledConnectionString(connectionString);\n}\nfunction isLocalhostConnectionString(connectionString) {\n  try {\n    const withHttpsProtocol = connectionString.replace(\n      /^postgresql:\\/\\//,\n      \"https://\"\n    );\n    return new URL(withHttpsProtocol).hostname === \"localhost\";\n  } catch (err) {\n    if (err instanceof TypeError) {\n      return false;\n    }\n    if (typeof err === \"object\" && err !== null && \"message\" in err && typeof err.message === \"string\" && err.message === \"Invalid URL\") {\n      return false;\n    }\n    throw err;\n  }\n}\n\n// src/sql-template.ts\nfunction sqlTemplate(strings, ...values) {\n  var _a, _b;\n  if (!isTemplateStringsArray(strings) || !Array.isArray(values)) {\n    throw new VercelPostgresError(\n      \"incorrect_tagged_template_call\",\n      \"It looks like you tried to call `sql` as a function. Make sure to use it as a tagged template.\\n\tExample: sql`SELECT * FROM users`, not sql('SELECT * FROM users')\"\n    );\n  }\n  let result = (_a = strings[0]) != null ? _a : \"\";\n  for (let i = 1; i < strings.length; i++) {\n    result += `$${i}${(_b = strings[i]) != null ? _b : \"\"}`;\n  }\n  return [result, values];\n}\nfunction isTemplateStringsArray(strings) {\n  return Array.isArray(strings) && \"raw\" in strings && Array.isArray(strings.raw);\n}\n\n// src/create-client.ts\n\nvar VercelClient = class extends _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.Client {\n  /**\n   * A template literal tag providing safe, easy to use SQL parameterization.\n   * Parameters are substituted using the underlying Postgres database, and so must follow\n   * the rules of Postgres parameterization.\n   * @example\n   * ```ts\n   * const pool = createClient();\n   * const userId = 123;\n   * await client.connect();\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\n   * await client.end();\n   * ```\n   * @returns A promise that resolves to the query result.\n   */\n  async sql(strings, ...values) {\n    const [query, params] = sqlTemplate(strings, ...values);\n    return this.query(query, params);\n  }\n};\nfunction createClient(config) {\n  var _a;\n  const connectionString = (_a = config == null ? void 0 : config.connectionString) != null ? _a : postgresConnectionString(\"direct\");\n  if (!connectionString)\n    throw new VercelPostgresError(\n      \"missing_connection_string\",\n      \"You did not supply a 'connectionString' and no 'POSTGRES_URL_NON_POOLING' env var was found.\"\n    );\n  if (!isLocalhostConnectionString(connectionString) && !isDirectConnectionString(connectionString))\n    throw new VercelPostgresError(\n      \"invalid_connection_string\",\n      \"This connection string is meant to be used with a pooled connection. Try `createPool()` instead.\"\n    );\n  return new VercelClient({\n    ...config,\n    connectionString\n  });\n}\n\n// src/create-pool.ts\nvar VercelPool = class extends _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.Pool {\n  constructor(config) {\n    var _a;\n    super(config);\n    this.Client = VercelClient;\n    this.connectionString = (_a = config.connectionString) != null ? _a : \"\";\n  }\n  /**\n   * A template literal tag providing safe, easy to use SQL parameterization.\n   * Parameters are substituted using the underlying Postgres database, and so must follow\n   * the rules of Postgres parameterization.\n   * @example\n   * ```ts\n   * const pool = createPool();\n   * const userId = 123;\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\n   * ```\n   * @returns A promise that resolves to the query result.\n   */\n  async sql(strings, ...values) {\n    const [query, params] = sqlTemplate(strings, ...values);\n    const sql2 = (0,_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.neon)(this.connectionString, {\n      fullResults: true\n    });\n    return sql2(query, params);\n  }\n  connect(callback) {\n    return super.connect(\n      callback\n    );\n  }\n};\nfunction createPool(config) {\n  var _a;\n  const connectionString = (_a = config == null ? void 0 : config.connectionString) != null ? _a : postgresConnectionString(\"pool\");\n  if (!connectionString)\n    throw new VercelPostgresError(\n      \"missing_connection_string\",\n      \"You did not supply a 'connectionString' and no 'POSTGRES_URL' env var was found.\"\n    );\n  if (!isLocalhostConnectionString(connectionString) && !isPooledConnectionString(connectionString))\n    throw new VercelPostgresError(\n      \"invalid_connection_string\",\n      \"This connection string is meant to be used with a direct connection. Make sure to use a pooled connection string or try `createClient()` instead.\"\n    );\n  let maxUses = config == null ? void 0 : config.maxUses;\n  let max = config == null ? void 0 : config.max;\n  if (typeof EdgeRuntime !== \"undefined\") {\n    if (maxUses && maxUses !== 1) {\n      console.warn(\n        \"@vercel/postgres: Overriding `maxUses` to 1 because the EdgeRuntime does not support client reuse.\"\n      );\n    }\n    if (max && max !== 1e4) {\n      console.warn(\n        \"@vercel/postgres: Overriding `max` to 10,000 because the EdgeRuntime does not support client reuse.\"\n      );\n    }\n    maxUses = 1;\n    max = 1e4;\n  }\n  const pool2 = new VercelPool({\n    ...config,\n    connectionString,\n    maxUses,\n    max\n  });\n  return pool2;\n}\n\n// src/index.ts\n\nvar pool;\nvar sql = new Proxy(\n  // eslint-disable-next-line @typescript-eslint/no-empty-function -- [@vercel/style-guide@5 migration]\n  () => {\n  },\n  {\n    get(_, prop) {\n      if (!pool) {\n        pool = createPool();\n      }\n      const val = Reflect.get(pool, prop);\n      if (typeof val === \"function\") {\n        return val.bind(pool);\n      }\n      return val;\n    },\n    apply(_, __, argumentsList) {\n      if (!pool) {\n        pool = createPool();\n      }\n      return pool.sql(...argumentsList);\n    }\n  }\n);\nvar db = sql;\n\n\n//# sourceMappingURL=chunk-WDBQYBZQ.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/postgres/dist/chunk-WDBQYBZQ.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@vercel/postgres/dist/index-node.js":
/*!**********************************************************!*\
  !*** ./node_modules/@vercel/postgres/dist/index-node.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VercelClient: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.VercelClient),\n/* harmony export */   VercelPool: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.VercelPool),\n/* harmony export */   createClient: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.createClient),\n/* harmony export */   createPool: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.createPool),\n/* harmony export */   db: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.db),\n/* harmony export */   postgresConnectionString: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.postgresConnectionString),\n/* harmony export */   sql: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.sql),\n/* harmony export */   types: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.types)\n/* harmony export */ });\n/* harmony import */ var _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-WDBQYBZQ.js */ \"(rsc)/./node_modules/@vercel/postgres/dist/chunk-WDBQYBZQ.js\");\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @neondatabase/serverless */ \"(rsc)/./node_modules/@neondatabase/serverless/index.mjs\");\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ws */ \"(rsc)/./node_modules/ws/wrapper.mjs\");\n\n\n// src/index-node.ts\n\n\nif (_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neonConfig) {\n  _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neonConfig.webSocketConstructor = ws__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n}\n\n//# sourceMappingURL=index-node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHZlcmNlbC9wb3N0Z3Jlcy9kaXN0L2luZGV4LW5vZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFTNkI7O0FBRTdCO0FBQ3NEO0FBQ2xDO0FBQ3BCLElBQUksZ0VBQVU7QUFDZCxFQUFFLGdFQUFVLHdCQUF3QiwwQ0FBRTtBQUN0QztBQVVFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtYmxvZy8uL25vZGVfbW9kdWxlcy9AdmVyY2VsL3Bvc3RncmVzL2Rpc3QvaW5kZXgtbm9kZS5qcz82MDUwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFZlcmNlbENsaWVudCxcbiAgVmVyY2VsUG9vbCxcbiAgY3JlYXRlQ2xpZW50LFxuICBjcmVhdGVQb29sLFxuICBkYixcbiAgcG9zdGdyZXNDb25uZWN0aW9uU3RyaW5nLFxuICBzcWwsXG4gIHR5cGVzXG59IGZyb20gXCIuL2NodW5rLVdEQlFZQlpRLmpzXCI7XG5cbi8vIHNyYy9pbmRleC1ub2RlLnRzXG5pbXBvcnQgeyBuZW9uQ29uZmlnIH0gZnJvbSBcIkBuZW9uZGF0YWJhc2Uvc2VydmVybGVzc1wiO1xuaW1wb3J0IHdzIGZyb20gXCJ3c1wiO1xuaWYgKG5lb25Db25maWcpIHtcbiAgbmVvbkNvbmZpZy53ZWJTb2NrZXRDb25zdHJ1Y3RvciA9IHdzO1xufVxuZXhwb3J0IHtcbiAgVmVyY2VsQ2xpZW50LFxuICBWZXJjZWxQb29sLFxuICBjcmVhdGVDbGllbnQsXG4gIGNyZWF0ZVBvb2wsXG4gIGRiLFxuICBwb3N0Z3Jlc0Nvbm5lY3Rpb25TdHJpbmcsXG4gIHNxbCxcbiAgdHlwZXNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC1ub2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/postgres/dist/index-node.js\n");

/***/ })

};
;